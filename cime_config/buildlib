#!/usr/bin/env python

"""
build HYCOM-tools executable/s
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)
sys.path.append(os.environ.get("PWD"))

from standard_script_setup import *
from CIME.case import Case
from CIME.buildlib import parse_input
from CIME.utils import run_cmd, expect, safe_copy
from CIME.build import get_standard_makefile_args

#pylint: disable=undefined-variable
logger = logging.getLogger(__name__)

def _create_dir_structure(srcdir,targetdir, sourcemods=None):
    """
    Reproduce the directory structure of srcdir in targetdir with
    links to the files of srcdir.  If a sourcemods dir is provided and
    a file in the source tree matchs a file in the sourcemods directory
    link the sourcemods file instead
    """
    structure_updated = False
    for dirpath, _, filenames in os.walk(srcdir):
        structure = targetdir + dirpath[len(srcdir):]
        if not os.path.isdir(structure):
            os.mkdir(structure)
        for fname in filenames:
            # ignore some files
            if fname.startswith('.') or fname.startswith('#') or fname.startswith('~'):
                continue
            newfullpath = os.path.join(structure,fname)
            if sourcemods and os.path.isfile(os.path.join(sourcemods,fname)):
                # If file exists in case sourcemods use it
                linkto = os.path.join(sourcemods,fname)
            else:
                # otherwise link original file
                linkto = os.path.join(dirpath,fname)

            # Broken link or link to wrong path - remove it
            if (os.path.lexists(newfullpath) and not os.path.exists(newfullpath)) or \
               (os.path.exists(newfullpath) and not os.path.samefile(linkto,newfullpath)):
                os.unlink(newfullpath)
            # Create new link
            if not os.path.exists(newfullpath):
                os.symlink(linkto, newfullpath)
                structure_updated = True
    return structure_updated

###############################################################################
#pylint: disable=unused-argument
def buildtools(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        gmake_args = get_standard_makefile_args(case)

        # Define build and source root for HYCOM-tools
        bldroot_tools = os.path.join(bldroot,"..","..","ext","obj")
        if not os.path.isdir(bldroot_tools):
            os.makedirs(bldroot_tools)
        srcroot = case.get_value("SRCROOT")
        srcdir = os.path.join(srcroot,"src","tools","HYCOM-tools")

        structure_updated = _create_dir_structure(srcdir, bldroot_tools)

        # Copy CIME_setup
        src_file = os.path.join(srcroot,"src","model","HYCOM","cime","cime_config","CIME_setup")
        dst_file = os.path.join(bldroot_tools,"config","CIME_setup")
        safe_copy(src_file, dst_file)

        # Call make
        cmd = "ARCH={} ./Make_all.csh".format("CIME")
        #rc, out, err = run_cmd(cmd, from_dir=bldroot_tools, verbose=True)
        #rc, out, err = run_cmd(cmd, from_dir=bldroot_tools)



        # Create Filepath file
        #filepath_file = os.path.join(bldroot_tools,"Filepath")
        #if not os.path.isfile(filepath_file):
        #    #paths = []
        #    #for root, dirs, files in os.walk(os.path.join(srcroot,"src","tools","HYCOM-tools")):
        #    #    for d in dirs:
        #    #        paths.append(os.path.join(root, d))
        #    paths = [os.path.join(srcroot,"src","tools","HYCOM-tools","topo"),
        #             os.path.join(srcroot,"src","tools","HYCOM-tools","topo","src")]
#
#            with open(filepath_file, "w") as filepath:
#                filepath.write("\n".join(paths))
#                filepath.write("\n")

        # Generate Srcfiles
        #makefile = os.path.join(casetools, "Makefile")
        #cmd = "{} Srcfiles -j {} -fromdir {} MODEL= -f {} {}" .format(gmake, gmake_j, os.path.join(bldroot_tools,"Srcfiles"), makefile, gmake_args)
        #rc, out, err = run_cmd(cmd, verbose=True)


###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)
    buildtools(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
